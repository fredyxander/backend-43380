import __dirname from "../utils/index.js";
import swaggerJsDoc from "swagger-jsdoc";
import path from "path";

const swaggerOptions = {
    definition:{
        openapi:"3.0.1",
        info:{
            title:"Documentacion api de mascotas",
            version:"1.0.0",
            description:"Definicion de endpoints para la API de mascotas"
        }
    },
    apis:[`${path.join(__dirname,"../docs/**/*.yaml")}`],//archivos que contienen la documentacion de las rutas
};

//crear una variable que interpreta las opciones para trabajar con swagger
export const swaggerSpecs = swaggerJsDoc(swaggerOptions);





1.1. Crear el archivo con la ruta y schema.
//src/docs/sessions/sessions.yaml
paths:
  /api/sessions/register:
    post:
      summary: registrar usuario
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/updateUser'
      responses:
        "200":
          description: Usuario registrado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  payload:
                    type: string
        "500":
          description: Error interno del servidor, usualmente por una consulta defectuosa o mala conexión de la base de datos.


Método para obtener mascotas
//src/docs/pets/pets.yaml
paths:
  /api/pets/:
    get:
      summary: Obtener todas las mascotas
      tags:
        - Mascotas
      responses:
        "200":
          description: Las mascotas fueron obtenidas correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Pet'
        "500":
          description: Error interno del servidor, usualmente por una consulta defectuosa o mala conexión de la base de datos.


components:
  schemas:
    Pet:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Id autogenerado por la base de datos
        name:
          type: string
          description: "nombre de la mascota"
        specie:
          type: string
          description: "Especie de la mascota"
        birthDate:
          type: string
          description: "fecha de nacimiento de la mascota"
        adopted:
          type: boolean
          description: "indica si la mascota fue adoptada"
        owner:
          type: ObjectId
          description: id del dueño de la mascota
        image:
          type: string
          description: "Foto de la mascota"
      example:
        _id: ObjectId("812jakhds981273kjash")
        name: Pelusa
        birthDate: 12/10/2023
        adopted: true
        owner: ObjectId("9721sdwd9da8sd76a6s")
        image: mimascota.jpg


Metodo para crear mascota
//src/docs/pets/pets.yaml
paths:
  /api/pets/:
    get:
    . . .
    //método para crear mascota
    post:
      summary: crear mascota
      tags:
        - Mascotas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/newPet'
      responses:
        "200":
          description: mascota creada correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  payload:
                    type: string
        "500":
          description: Error interno del servidor, usualmente por una consulta defectuosa o mala conexión de la base de datos.
//componentes con los schemas
components:
  schemas:
    Pet:
  . . .
  //schema de req.body de mascota
  requestBodies:
    newPet:
      type: object
      properties:
        name:
          type: string
          description: "nombre de la mascota"
        specie:
          type: string
          description: "Especie de la mascota"
        birthDate:
          type: string
          description: "fecha de nacimiento de la mascota"
      example:
        name: Pelusa
        specie: gato
        birthDate: 05-10-2022

Método para adopción con doble parámetro.
//src/docs/adoptions/adoptions.yaml
paths:
  /api/adoptions/{uid}/{pid}:
    post:
      summary: adoptar mascota por un usuario
      tags:
        - Adopción
      parameters:
        - name: uid
          in: path
          required: true
          description: id del usuario que quiere adoptar
          schema:
            $type: string
        - name: pid
          in: path
          required: true
          description: id de la mascota a adoptar
          schema:
            $type: string
      responses:
        "200":
          description: mascota adoptada
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  payload:
                    type: string
        "500":
          description: Error interno del servidor, usualmente por una consulta defectuosa o mala conexión de la base de datos.






